// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        Int        @id @default(autoincrement())
  steamUser SteamUser?
}

model SteamUser {
  steamId      BigInt  @id
  userId       Int     @unique
  user         User    @relation(fields: [userId], references: [id])
  personaName  String
  realName     String?
  profileUrl   String
  avatar       String
  avatarMedium String
  avatarFull   String
  avatarHash   String
  lastLogoff   Int
}

enum GameState {
  BACKLOG // Not started, want to play

  PLAYING // Currently playing
  PERIODIC // Game that you come back to every now and then
  SHELVED // Paused, not currently playing

  PLAYED // Nothing specific
  COMPLETED // Completed whatever you wanted to
  RETIRED // Finished with, for games that lack an ending
  ABANDONED // Unfinished, not going back
}

model Game {
  id           Int               @id @default(autoincrement())
  name         String
  steamGame    SteamGame?
  state        GameState?
  stateChanges GameStateChange[]
}

model GameStateChange {
  id        Int        @id @default(autoincrement())
  gameId    Int
  game      Game       @relation(fields: [gameId], references: [id])
  state     GameState?
  timestamp DateTime
}

enum SteamAppInfoState {
  FETCHED
  NOT_FETCHED
  UNAVAILABLE
}

model SteamGame {
  appId        BigInt            @id
  gameId       Int               @unique
  game         Game              @relation(fields: [gameId], references: [id])
  appInfo      SteamAppInfo?
  appInfoState SteamAppInfoState @default(NOT_FETCHED)

  name String

  playtimeForever        Int?
  playtime2weeks         Int?
  playtimeWindowsForever Int?
  playtimeMacForever     Int?
  playtimeLinuxForever   Int?
  playtimeDeckForever    Int?
  playtimeDisconnected   Int?
  rTimeLastPlayed        Int?

  imgIconUrl      String
  capsuleFilename String

  hasCommunityVisibleStats Boolean @default(false)
  hasWorkshop              Boolean @default(false)
  hasDlc                   Boolean @default(false)
  hasLeaderboards          Boolean @default(false)

  playtimeRecords SteamGamePlaytime[]
}

model SteamAppInfo {
  appId               BigInt    @id
  fetchedAt           DateTime
  SteamGame           SteamGame @relation(fields: [appId], references: [appId])
  type                String
  name                String
  requiredAge         Int?
  isFree              Boolean
  detailedDescription String
  aboutTheGame        String
  shortDescription    String
  headerImage         String
  capsuleImage        String
  capsuleImagev5      String
  website             String?
  developers          Json
  publishers          Json
  platformWindows     Boolean
  platformMac         Boolean
  platformLinux       Boolean
  metacriticScore     Int?
  metacriticUrl       String?
  categories          Json
  genres              Json
  screenshots         Json
  releaseDate         DateTime?
  comingSoon          Boolean?
  background          String
  backgroundRaw       String
}

model SteamGamePlaytime {
  id         Int       @id @default(autoincrement())
  steamAppId BigInt
  steamGame  SteamGame @relation(fields: [steamAppId], references: [appId])

  timestampStart DateTime?
  timestampEnd   DateTime

  playtimeForever        Int?
  playtime2weeks         Int?
  playtimeWindowsForever Int?
  playtimeMacForever     Int?
  playtimeLinuxForever   Int?
  playtimeDeckForever    Int?
  playtimeDisconnected   Int?
  rTimeLastPlayed        Int?
}
